// ChatClient.java
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class ChatClient {

    private static final String SERVER_ADDRESS = "localhost"; // Server IP address
    private static final int SERVER_PORT = 12345; // Server port

    public static void main(String[] args) {
        Socket socket = null;
        BufferedReader in = null;
        PrintWriter out = null;
        Scanner scanner = new Scanner(System.in);

        try {
            socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(socket.getOutputStream(), true);

            System.out.println("Connected to chat server.");

            // Thread for receiving messages from the server
            Thread receiveThread = new Thread(new ServerMessageReader(in));
            receiveThread.start();

            // Prompt for username
            String line;
            while ((line = in.readLine()) != null) {
                if (line.startsWith("SUBMITNAME")) {
                    System.out.print("Enter your username: ");
                    String username = scanner.nextLine();
                    out.println(username); // Send username to server
                    break; // Exit the loop once name is submitted
                }
            }

            // Main thread for sending messages to the server
            System.out.println("You can now start typing messages. Type 'QUIT' to exit.");
            while (scanner.hasNextLine()) {
                String message = scanner.nextLine();
                out.println(message); // Send user input to server
                if (message.equalsIgnoreCase("QUIT")) {
                    break;
                }
            }

        } catch (UnknownHostException e) {
            System.err.println("Unknown host: " + SERVER_ADDRESS);
        } catch (IOException e) {
            System.err.println("I/O error connecting to server: " + e.getMessage());
        } finally {
            try {
                if (scanner != null) scanner.close();
                if (in != null) in.close();
                if (out != null) out.close();
                if (socket != null) socket.close();
            } catch (IOException e) {
                System.err.println("Error closing resources: " + e.getMessage());
            }
            System.out.println("Disconnected from chat server.");
        }
    }

    // Inner class to continuously read messages from the server
    private static class ServerMessageReader implements Runnable {
        private BufferedReader serverIn;

        public ServerMessageReader(BufferedReader serverIn) {
            this.serverIn = serverIn;
        }

        @Override
        public void run() {
            String message;
            try {
                while ((message = serverIn.readLine()) != null) {
                    // Ignore the SUBMITNAME command as it's handled in the main thread
                    if (!message.startsWith("SUBMITNAME")) {
                        System.out.println(message);
                    }
                }
            } catch (IOException e) {
                System.err.println("Error reading from server: " + e.getMessage());
            } finally {
                // The main thread's finally block will handle closing the serverIn
            }
        }
    }
}